# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    ft_printf.c.old                                    :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: cjoao-de <cjoao-de@student.42lisboa.com    +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2023/10/26 13:27:18 by cjoao-de          #+#    #+#              #
#    Updated: 2024/01/29 17:17:56 by cjoao-de         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

#include "../include/libft.h"

/* ft_printf (42 flavored printf) implements and formats following specifiers */
/*
	%c Prints a single character.
	%s Prints a string (as defined by the common C convention).
	%p The void * pointer argument has to be printed in hexadecimal format.
	%% Prints a percent sign.
	%d Prints a decimal (base 10) number.>=INT_MIN <=INT_MAX else -1
		%d interprets the input as a decimal integer.
	%i Prints an integer in base 10. >=INT_MIN <=INT_MAX else -1
		%i interprets the input as a decimal integer,
		a hexadecimal integer (if it starts with 0x or 0X),
		or an octal integer (if it starts with 0).
	%x Prints a number in hexadecimal (base 16) lowercase format. unsigned int
	%X Prints a number in hexadecimal (base 16) uppercase format. unsigned int
	%u Prints an unsigned decimal (base 10) number. UINT_MAX else if <0 rollover
*/
/* some references
https://iq.opengenus.org/print-text-in-color-in-c/
https://stackoverflow.com/questions/26954271/
nil-value-returned-by-int-pointer-in-c
https://stackoverflow.com/questions/31548440/
why-does-printf-literally-print-null-and-what-exactly-happens */

// formats specifier and writes them. handles errors in specifier
int	pf_sw_printf(va_list args, const char format, int *pf_len)
{
	if (format == 'c')
		vput_char((va_arg(args, int)), pf_len);
	else if (format == 's')
		vput_str((va_arg(args, char *)), pf_len);
	else if (format == '%' )
		vput_char('%', pf_len);
	else if (format == 'd' || format == 'i')
		vput_base((va_arg(args, int)), 10, format, pf_len);
	else if (format == 'X' || format == 'x')
		vput_base((va_arg(args, int)), 16, format, pf_len);
	else if (format == 'u')
		vput_base((va_arg(args, int)), 10, format, pf_len);
	else if (format == 'p')
		vput_pointer((va_arg(args, void *)), pf_len);
	else
	{
		ft_printf("\033[1;31m%%%c\033[1;0m", format);
		return (-1);
	}
	return (0);
}

// Parse variables for specifier and writes text.
int	ft_printf(const char *format, ...)
{
	va_list	args;
	int		pf_len;
	int		i;

	i = 0;
	pf_len = 0;
	if (format == NULL)
		return (-1);
	va_start(args, format);
	while (*(format + i))
	{
		if (*(format + i) == '%')
		{
			pf_sw_printf(args, *(format + i + 1), &pf_len);
			if (*(format + i + 1))
				i++;
			else
				return (pf_len);
		}
		else
			vput_char(*(format + i), &pf_len);
		i++;
	}
	va_end(args);
	return (pf_len);
}

// int	main(void)
// {
// 	// ft_printf("go to URL for main with tests\n");
// 	// ft_printf("%s\n", "https://pastebin.com/raw/mjtwHApD");
// ft_printf("save as main.c and compile as such, or run franncinnette...\n");
// ft_printf("cc -Wall -Wextra -Werror main.c libftprintf/.a && ./a.out\n");
// 	ft_printf("sem querer ja leu...text + 1 ssturff%%%y%%%");
// 	ft_printf("\n");
// ft_printf("%");
// 	return (0);
// }
